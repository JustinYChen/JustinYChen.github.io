<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Dynamic Memory Allocation</title>
    <link href="/2021/11/23/Dynamic-Memory-Allocation/"/>
    <url>/2021/11/23/Dynamic-Memory-Allocation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="动态内存规划"><a href="#动态内存规划" class="headerlink" title="动态内存规划"></a>动态内存规划</h1><h2 id="地址和指针"><a href="#地址和指针" class="headerlink" title="地址和指针"></a>地址和指针</h2><p><img src="Address.png" alt="Address"></p><ol><li><p>C语言库中的相关函数<br>在stdlib.h头文件中<br>void *malloc(size_t size)</p><h3 id="size-t"><a href="#size-t" class="headerlink" title="size_t"></a>size_t</h3><ol><li>是 an unsigned integer type, </li><li>是sizeof运算的返回值</li><li>在stdlib中广泛用于表示大小</li></ol><p>创建一个大小为size的内存地址，返回指向新开辟内存的地址，如果失败返回NULL</p><p>void *calloc(size_t nobj, size_t size）：基本与malloc相同，但有更多用法，会自动初始化为0</p><p>void *realloc(void *p, size_t size)：重新规划已经存在的内存地址的大小</p><p>void free(void *p)：释放内存，有开辟就要有释放，一一对应</p></li><li><p>总结<br><img src="Summary.png" alt="总结"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Time Compleity</title>
    <link href="/2021/11/23/Algorithms01/"/>
    <url>/2021/11/23/Algorithms01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p><img src="FunctionGrowth.png" alt="Function growth"><br><img src="TimeRelation.png" alt="时间和复杂度关系图"></p><ol><li>Big-O分析(Upper bound)<br>用于确定算法复杂度的上限<br>我们可以说f(n)在O(g(n))里，如果：<br>f(n) &lt; c0 * g(n) for all n &gt; N0<br>c0和N0是常数<br><img src="Ex.png" alt="Ex"><br>注：算法的效率和n的大小有关<br><img src="N.png" alt="算法效率例子"><br><img src="GrowthSpeed.png" alt="算法复杂度增长速度"></li><li>Big-Omega分析(Lower bound)<br>用于确定算法复杂度的上限<br>与Big-O定义基本相同，换个符号</li><li>Big-Theta(Tight upper bound)<br>f(n)是O(g(n))且f(n)是Omege(g(n))<br>f(n)是O(g(n))且g(n)是O(f(n))</li><li>最好情况，最差情况，平均情况<br><img src="Ex1.png" alt="情况分析案例"></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DatabaseSystem01</title>
    <link href="/2021/07/15/DatabaseSystem01/"/>
    <url>/2021/07/15/DatabaseSystem01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="数据库的生命周期"><a href="#数据库的生命周期" class="headerlink" title="数据库的生命周期"></a>数据库的生命周期</h2><p><img src="%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><ol><li>设计数据库(Database Planning)<br>了解数据库服务的企业是如何运作</li><li>设定边界(Systems Definition)<br>设计数据库与用户和其他应用领域的对接<br>设计数据库与管理系统的对接</li><li>需求的定义和分析(Requirements Definition and Analysis)<br>收集和分析需求，需要怎么分类等</li></ol><h3 id="设计部分"><a href="#设计部分" class="headerlink" title="设计部分"></a>设计部分</h3><ol start="4"><li>概念设计(Conceptual Design)<br>建立模型，包含数据库中要用到的数据类型，可以不管物理层面<br><img src="ER.png" alt="ER Model"></li><li>逻辑层设计(Logical Design)<br>考虑数据类型之间的交互<br><img src="Relational.png" alt="Relational Model"></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/05/16/Blog-init/"/>
    <url>/2021/05/16/Blog-init/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li><p>安装 <a href="https://nodejs.org/en/">Node.js</a> LTS版本<br><img src="Nodejs.png" alt="如图"></p></li><li><p>在命令行中用 npm 安装 cnpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure></li></ul><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><ul><li>在命令行中用 cnpm 安装 Hexo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure></li></ul><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><ul><li>在命令行中讲目录改为目标空文件夹处</li><li>初始化博客<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure></li></ul><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><ul><li>在博客目录安装部署插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure></li><li>在博客目录 <em>_config.yml</em> 文件底部修改 deploy 设置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: git@github.com:...<br>  branch: master<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>博客学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
